(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{471:function(_,v,a){"use strict";a.r(v);var r=a(20),t=Object(r.a)({},(function(){var _=this,v=_.$createElement,a=_._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[a("h1",{attrs:{id:"kafka-可靠传输"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kafka-可靠传输"}},[_._v("#")]),_._v(" Kafka 可靠传输")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E6%B6%88%E6%81%AF%E4%B8%8D%E4%B8%A2%E5%A4%B1"}},[_._v("消息不丢失")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#kafka-%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7"}},[_._v("kafka 的可靠性")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E5%A4%8D%E5%88%B6"}},[_._v("复制")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E5%A4%8D%E5%88%B6%E7%B3%BB%E6%95%B0"}},[_._v("复制系数")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E4%B8%8D%E5%AE%8C%E5%85%A8%E7%9A%84%E9%80%89%E4%B8%BB"}},[_._v("不完全的选主")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E6%9C%80%E5%B0%91%E5%90%8C%E6%AD%A5%E5%89%AF%E6%9C%AC"}},[_._v("最少同步副本")])])])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E7%94%9F%E4%BA%A7%E8%80%85%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7"}},[_._v("生产者的可靠性")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#ack"}},[_._v("ACK")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E9%87%8D%E8%AF%95"}},[_._v("重试")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86"}},[_._v("错误处理")])])])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E6%B6%88%E8%B4%B9%E8%80%85%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7"}},[_._v("消费者的可靠性")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E6%B6%88%E8%B4%B9%E8%80%85%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%80%A7%E9%85%8D%E7%BD%AE"}},[_._v("消费者的可靠性配置")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E6%98%BE%E7%A4%BA%E6%8F%90%E4%BA%A4%E5%81%8F%E7%A7%BB%E9%87%8F"}},[_._v("显示提交偏移量")])])])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E6%B6%88%E6%81%AF%E7%9A%84%E6%9C%89%E5%BA%8F%E6%80%A7"}},[_._v("消息的有序性")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E6%96%B9%E6%A1%88%E4%B8%80%E5%8D%95-partition"}},[_._v("方案一、单 Partition")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E6%96%B9%E6%A1%88%E4%BA%8C%E5%90%8C%E4%B8%80%E4%B8%AA-key-%E7%9A%84%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%E7%BB%99%E6%8C%87%E5%AE%9A-partition"}},[_._v("方案二、同一个 key 的消息发送给指定 Partition")])])])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9"}},[_._v("重复消费")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E6%B6%88%E6%81%AF%E7%A7%AF%E5%8E%8B"}},[_._v("消息积压")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E9%AA%8C%E8%AF%81%E7%B3%BB%E7%BB%9F%E5%8F%AF%E9%9D%A0%E6%80%A7"}},[_._v("验证系统可靠性")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5"}},[_._v("最佳实践")])]),_._v(" "),a("li",[a("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99"}},[_._v("参考资料")])])]),_._v(" "),a("h2",{attrs:{id:"消息不丢失"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息不丢失"}},[_._v("#")]),_._v(" 消息不丢失")]),_._v(" "),a("p",[_._v("如何保证消息的可靠性传输，或者说，如何保证消息不丢失？这对于任何 MQ 都是核心问题。")]),_._v(" "),a("p",[_._v("一条消息从生产到消费，可以划分三个阶段：")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20210422042613.png",alt:""}})]),_._v(" "),a("ul",[a("li",[a("strong",[_._v("生产阶段")]),_._v("：Producer 创建消息，并通过网络发送给 Broker。")]),_._v(" "),a("li",[a("strong",[_._v("存储阶段")]),_._v("：Broker 收到消息并存储，如果是集群，还要同步副本给其他 Broker。")]),_._v(" "),a("li",[a("strong",[_._v("消费阶段")]),_._v("：Consumer 向 Broker 请求消息，Broker 通过网络传输给 Consumer。")])]),_._v(" "),a("p",[_._v("这三个阶段都可能丢失数据，所以要保证消息丢失，就需要任意一环都保证可靠。")]),_._v(" "),a("h3",{attrs:{id:"存储阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储阶段"}},[_._v("#")]),_._v(" 存储阶段")]),_._v(" "),a("p",[_._v("存储阶段指的是 Kafka Server，也就是 Broker 如何保证消息不丢失。")]),_._v(" "),a("p",[_._v("一句话概括，"),a("strong",[_._v("Kafka 只对“已提交”的消息（committed message）做有限度的持久化保证")]),_._v("。")]),_._v(" "),a("p",[_._v("上面的话可以解读为：")]),_._v(" "),a("ul",[a("li",[a("strong",[_._v("已提交")]),_._v("："),a("strong",[_._v("只有当消息被写入分区的若干同步副本时，才被认为是已提交的")]),_._v("。为什么是若干个 Broker 呢？这取决于你对“已提交”的定义。你可以选择只要 Leader 成功保存该消息就算是已提交，也可以是令所有 Broker 都成功保存该消息才算是已提交。")]),_._v(" "),a("li",[a("strong",[_._v("持久化")]),_._v("：Kafka 的数据存储在磁盘上，所以只要写入成功，天然就是持久化的。")]),_._v(" "),a("li",[a("strong",[_._v("只要还有一个副本是存活的，那么已提交的消息就不会丢失")]),_._v("。")]),_._v(" "),a("li",[a("strong",[_._v("消费者只能读取已提交的消息")]),_._v("。")])]),_._v(" "),a("h4",{attrs:{id:"副本机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#副本机制"}},[_._v("#")]),_._v(" 副本机制")]),_._v(" "),a("p",[a("strong",[_._v("Kafka 的副本机制是 kafka 可靠性保证的核心")]),_._v("。")]),_._v(" "),a("p",[_._v("Kafka 的主题被分为多个分区，分区是基本的数据块。每个分区可以有多个副本，有一个是 Leader（主副本），其他是 Follower（从副本）。所有数据都直接发送给 Leader，或者直接从 Leader 读取事件。Follower 只需要与 Leader 保持同步，并及时复制最新的数据。当 Leader 宕机时，从 Follower 中选举一个成为新的 Leader。")]),_._v(" "),a("p",[_._v("Broker 有 3 个配置参数会影响 Kafka 消息存储的可靠性。")]),_._v(" "),a("h4",{attrs:{id:"副本数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#副本数"}},[_._v("#")]),_._v(" 副本数")]),_._v(" "),a("p",[a("strong",[a("code",[_._v("replication.factor")]),_._v(" 的作用是设置每个分区的副本数")]),_._v("。"),a("code",[_._v("replication.factor")]),_._v(" 是主题级别配置； "),a("code",[_._v("default.replication.factor")]),_._v(" 是 broker 级别配置。")]),_._v(" "),a("p",[_._v("副本数越多，数据可靠性越高；但由于副本数增多，也会增加同步副本的开销，可能会降低集群的可用性。一般，建议设为 3，这也是 Kafka 的默认值。")]),_._v(" "),a("h4",{attrs:{id:"不完全的选主"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不完全的选主"}},[_._v("#")]),_._v(" 不完全的选主")]),_._v(" "),a("p",[a("code",[_._v("unclean.leader.election.enable")]),_._v(" 用于控制是否支持不同步的副本参与选举 Leader。"),a("code",[_._v("unclean.leader.election.enable")]),_._v(" 是 broker 级别（实际上是集群范围内）配置，默认值为 true。")]),_._v(" "),a("ul",[a("li",[_._v("如果设为 true，代表着"),a("strong",[_._v("允许不同步的副本成为主副本")]),_._v("（即不完全的选举），那么将"),a("strong",[_._v("面临丢失消息的风险")]),_._v("；")]),_._v(" "),a("li",[_._v("如果设为 false，就要"),a("strong",[_._v("等待原先的主副本重新上线")]),_._v("，从而降低了可用性。")])]),_._v(" "),a("h4",{attrs:{id:"最少同步副本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最少同步副本"}},[_._v("#")]),_._v(" 最少同步副本")]),_._v(" "),a("p",[a("strong",[a("code",[_._v("min.insync.replicas")]),_._v(" 控制的是消息至少要被写入到多少个副本才算是“已提交”")]),_._v("。"),a("code",[_._v("min.insync.replicas")]),_._v(" 是主题级别和 broker 级别配置。")]),_._v(" "),a("p",[_._v("尽管可以为一个主题配置 3 个副本，但还是可能会出现只有一个同步副本的情况。如果这个同步副本变为不可用，则必须在可用性和数据一致性之间做出选择。Kafka 中，消息只有被写入到所有的同步副本之后才被认为是已提交的。但如果只有一个同步副本，那么在这个副本不可用时，则数据就会丢失。")]),_._v(" "),a("p",[_._v("如果要确保已经提交的数据被已写入不止一个副本，就需要把最小同步副本的设置为大一点的值。")]),_._v(" "),a("blockquote",[a("p",[_._v("注意：要确保 "),a("code",[_._v("replication.factor")]),_._v(" > "),a("code",[_._v("min.insync.replicas")]),_._v("。如果两者相等，那么只要有一个副本挂机，整个分区就无法正常工作了。我们不仅要改善消息的持久性，防止数据丢失，还要在不降低可用性的基础上完成。推荐设置成 "),a("code",[_._v("replication.factor = min.insync.replicas + 1")]),_._v("。")])]),_._v(" "),a("h3",{attrs:{id:"生产阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生产阶段"}},[_._v("#")]),_._v(" 生产阶段")]),_._v(" "),a("p",[_._v("在生产消息阶段，消息队列一般通过请求确认机制，来保证消息的可靠传递，Kafka 也不例外。")]),_._v(" "),a("p",[a("RouterLink",{attrs:{to:"/kafka/kafka/Kafka生产者.html"}},[_._v("Kafka 生产者")]),_._v(" 中提到了，Kafka 有三种发送方式：同步、异步、异步回调。")],1),_._v(" "),a("p",[_._v("同步方式能保证消息不丢失，但性能太差；异步方式发送消息，通常会立即返回，但消息可能丢失。")]),_._v(" "),a("p",[_._v("解决生产者丢失消息的方案：")]),_._v(" "),a("p",[_._v("生产者使用异步回调方式 "),a("code",[_._v("producer.send(msg, callback)")]),_._v(" 发送消息。callback（回调）能准确地告诉你消息是否真的提交成功了。一旦出现消息提交失败的情况，你就可以有针对性地进行处理。")]),_._v(" "),a("ul",[a("li",[_._v("如果是因为那些瞬时错误，那么仅仅让 Producer 重试就可以了；")]),_._v(" "),a("li",[_._v("如果是消息不合格造成的，那么可以调整消息格式后再次发送。")])]),_._v(" "),a("p",[_._v("然后，需要基于以下几点来保证 Kafka 生产者的可靠性：")]),_._v(" "),a("h4",{attrs:{id:"ack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ack"}},[_._v("#")]),_._v(" ACK")]),_._v(" "),a("p",[_._v("生产者可选的确认模式有三种："),a("code",[_._v("acks=0")]),_._v("、"),a("code",[_._v("acks=1")]),_._v("、"),a("code",[_._v("acks=all")]),_._v("。")]),_._v(" "),a("ul",[a("li",[a("p",[a("code",[_._v("acks=0")]),_._v("、"),a("code",[_._v("acks=1")]),_._v(" 都有丢失数据的风险。")])]),_._v(" "),a("li",[a("p",[a("code",[_._v("acks=all")]),_._v(" 意味着会等待所有同步副本都收到消息。再结合 "),a("code",[_._v("min.insync.replicas")]),_._v(" ，就可以决定在得到确认响应前，至少有多少副本能够收到消息。")])])]),_._v(" "),a("p",[_._v("这是最保险的做法，但也会降低吞吐量。")]),_._v(" "),a("h4",{attrs:{id:"重试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重试"}},[_._v("#")]),_._v(" 重试")]),_._v(" "),a("p",[_._v("如果 broker 返回的错误可以通过"),a("strong",[_._v("重试")]),_._v("来解决，生产者会自动处理这些错误。")]),_._v(" "),a("ul",[a("li",[a("strong",[_._v("可重试错误")]),_._v("，如："),a("code",[_._v("LEADER_NOT_AVAILABLE")]),_._v("，主副本不可用，可能过一段时间，集群就会选举出新的主副本，重试可以解决问题。")]),_._v(" "),a("li",[a("strong",[_._v("不可重试错误")]),_._v("，如："),a("code",[_._v("INVALID_CONFIG")]),_._v("，即使重试，也无法改变配置选项，重试没有意义。")])]),_._v(" "),a("p",[_._v("需要注意的是：有时可能因为网络问题导致没有收到确认，但实际上消息已经写入成功。生产者会认为出现临时故障，重试发送消息，这样就会出现重复记录。所以，尽可能在业务上保证幂等性。")]),_._v(" "),a("p",[_._v("设置 "),a("code",[_._v("retries")]),_._v(" 为一个较大的值。这里的 "),a("code",[_._v("retries")]),_._v(" 同样是 Producer 的参数，对应前面提到的 Producer 自动重试。当出现网络的瞬时抖动时，消息发送可能会失败，此时配置了 retries > 0 的 Producer 能够自动重试消息发送，避免消息丢失。")]),_._v(" "),a("h4",{attrs:{id:"错误处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#错误处理"}},[_._v("#")]),_._v(" 错误处理")]),_._v(" "),a("p",[_._v("开发者需要自行处理的错误：")]),_._v(" "),a("ul",[a("li",[_._v("不可重试的 broker 错误，如消息大小错误、认证错误等；")]),_._v(" "),a("li",[_._v("消息发送前发生的错误，如序列化错误；")]),_._v(" "),a("li",[_._v("生产者达到重试次数上限或消息占用的内存达到上限时发生的错误。")])]),_._v(" "),a("h3",{attrs:{id:"消费阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消费阶段"}},[_._v("#")]),_._v(" 消费阶段")]),_._v(" "),a("p",[_._v("前文已经提到，"),a("strong",[_._v("消费者只能读取已提交的消息")]),_._v("。这就保证了消费者接收到消息时已经具备了数据一致性。")]),_._v(" "),a("p",[_._v("消费者唯一要做的是确保哪些消息是已经读取过的，哪些是没有读取过的（通过提交偏移量给 Broker 来确认）。如果消费者提交了偏移量却未能处理完消息，那么就有可能造成消息丢失，这也是消费者丢失消息的主要原因。")]),_._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200727140159.png",alt:"img"}})]),_._v(" "),a("h4",{attrs:{id:"消费者的可靠性配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消费者的可靠性配置"}},[_._v("#")]),_._v(" 消费者的可靠性配置")]),_._v(" "),a("ul",[a("li",[a("code",[_._v("group.id")]),_._v(" - 如果希望消费者可以看到主题的所有消息，那么需要为它们设置唯一的 "),a("code",[_._v("group.id")]),_._v("。")]),_._v(" "),a("li",[a("code",[_._v("auto.offset.reset")]),_._v(" - 有两个选项：\n"),a("ul",[a("li",[a("code",[_._v("earliest")]),_._v(" - 消费者会从分区的开始位置读取数据")]),_._v(" "),a("li",[a("code",[_._v("latest")]),_._v(" - 消费者会从分区末尾位置读取数据")])])]),_._v(" "),a("li",[a("code",[_._v("enable.auto.commit")]),_._v(" - 消费者自动提交偏移量。如果设为 true，处理流程更简单，但无法保证重复处理消息。")]),_._v(" "),a("li",[a("code",[_._v("auto.commit.interval.ms")]),_._v(" - 自动提交的频率，默认为每 5 秒提交一次。")])]),_._v(" "),a("h4",{attrs:{id:"显示提交偏移量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#显示提交偏移量"}},[_._v("#")]),_._v(" 显示提交偏移量")]),_._v(" "),a("blockquote",[a("p",[_._v("如果 "),a("code",[_._v("enable.auto.commit")]),_._v(" 设为 true，即自动提交，就无需考虑提交偏移量的问题。")])]),_._v(" "),a("p",[_._v("如果选择显示提交偏移量，需要考虑以下问题：")]),_._v(" "),a("ul",[a("li",[_._v("必须在处理完消息后再发送确认（提交偏移量），不要收到消息立即确认。")]),_._v(" "),a("li",[_._v("提交频率是性能和重复消息数之间的权衡")]),_._v(" "),a("li",[_._v("分区再均衡")]),_._v(" "),a("li",[_._v("消费可能需要重试机制")]),_._v(" "),a("li",[_._v("超时处理")]),_._v(" "),a("li",[_._v("消费者可能需要维护消费状态，如：处理完消息后，记录在数据库中。")]),_._v(" "),a("li",[_._v("幂等性设计\n"),a("ul",[a("li",[_._v("写数据库：根据主键判断记录是否存在")]),_._v(" "),a("li",[_._v("写 Redis：set 操作天然具有幂等性")]),_._v(" "),a("li",[_._v("复杂的逻辑处理，则可以在消息中加入全局 ID")])])])]),_._v(" "),a("h2",{attrs:{id:"重复消息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重复消息"}},[_._v("#")]),_._v(" 重复消息")]),_._v(" "),a("p",[_._v("在 MQTT 协议中，给出了三种传递消息时能够提供的服务质量标准，这三种服务质量从低到高依次是：")]),_._v(" "),a("ul",[a("li",[a("strong",[_._v("At most once")]),_._v("：至多一次。消息在传递时，最多会被送达一次。换一个说法就是，没什么消息可靠性保证，允许丢消息。一般都是一些对消息可靠性要求不太高的监控场景使用，比如每分钟上报一次机房温度数据，可以接受数据少量丢失。")]),_._v(" "),a("li",[a("strong",[_._v("At least once")]),_._v(": 至少一次。消息在传递时，至少会被送达一次。也就是说，不允许丢消息，但是允许有少量重复消息出现。")]),_._v(" "),a("li",[a("strong",[_._v("Exactly once")]),_._v("：恰好一次。消息在传递时，只会被送达一次，不允许丢失也不允许重复，这个是最高的等级。")])]),_._v(" "),a("p",[_._v("绝大部分消息队列提供的服务质量都是 At least once，包括 RocketMQ、RabbitMQ 和 Kafka 都是这样。也就是说，消息队列很难保证消息不重复。")]),_._v(" "),a("p",[_._v("一般解决重复消息的办法是，在消费端，"),a("strong",[_._v("保证消费消息的操作具备幂等性")]),_._v("。")]),_._v(" "),a("p",[_._v("常用的实现幂等操作的方法：")]),_._v(" "),a("h3",{attrs:{id:"利用数据库的唯一约束实现幂等"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#利用数据库的唯一约束实现幂等"}},[_._v("#")]),_._v(" 利用数据库的唯一约束实现幂等")]),_._v(" "),a("p",[_._v("关系型数据库可以使用 "),a("code",[_._v("INSERT IF NOT EXIST")]),_._v(" 语句防止重复；Redis 可以使用 "),a("code",[_._v("SETNX")]),_._v(" 命令来防止重复；其他数据库只要支持类似语义，也是一个道理。")]),_._v(" "),a("h3",{attrs:{id:"为更新的数据设置前置条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为更新的数据设置前置条件"}},[_._v("#")]),_._v(" 为更新的数据设置前置条件")]),_._v(" "),a("p",[_._v("如果满足条件就更新数据，否则拒绝更新数据，在更新数据的时候，同时变更前置条件中需要判断的数据。这样，重复执行这个操作时，由于第一次更新数据的时候已经变更了前置条件中需要判断的数据，不满足前置条件，则不会重复执行更新数据操作。")]),_._v(" "),a("p",[_._v("但是，如果我们要更新的数据不是数值，或者我们要做一个比较复杂的更新操作怎么办？用什么作为前置判断条件呢？更加通用的方法是，给数据增加一个版本号属性，每次更数据前，比较当前数据的版本号是否和消息中的版本号一致，如果不一致就拒绝更新数据，更新数据的同时将版本号 +1，一样可以实现幂等更新。")]),_._v(" "),a("h3",{attrs:{id:"记录并检查操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#记录并检查操作"}},[_._v("#")]),_._v(" 记录并检查操作")]),_._v(" "),a("p",[_._v("还有一种通用性最强，适用范围最广的实现幂等性方法：记录并检查操作，也称为“Token 机制或者 GUID（全局唯一 ID）机制”，实现的思路特别简单：在执行数据更新操作之前，先检查一下是否执行过这个更新操作。")]),_._v(" "),a("p",[_._v("具体的实现方法是，在发送消息时，给每条消息指定一个全局唯一的 ID，消费时，先根据这个 ID 检查这条消息是否有被消费过，如果没有消费过，才更新数据，然后将消费状态置为已消费。")]),_._v(" "),a("p",[_._v("需要注意的是，“检查消费状态，然后更新数据并且设置消费状态”中，三个操作必须作为一组操作保证原子性，才能真正实现幂等，否则就会出现 Bug。这一组操作可以通过分布式事务或分布式锁来保证其原子性。")]),_._v(" "),a("h2",{attrs:{id:"消息的有序性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息的有序性"}},[_._v("#")]),_._v(" 消息的有序性")]),_._v(" "),a("p",[_._v("某些场景下，可能会要求按序发送消息。")]),_._v(" "),a("h3",{attrs:{id:"方案一、单-partition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方案一、单-partition"}},[_._v("#")]),_._v(" 方案一、单 Partition")]),_._v(" "),a("p",[_._v("Kafka 每一个 Partition 只能隶属于消费者群组中的一个 Consumer，换句话说，每个 Partition 只能被一个 Consumer 消费。所以，如果 Topic 是单 Partition，自然是有序的。")]),_._v(" "),a("p",[_._v("方案分析")]),_._v(" "),a("p",[_._v("优点：简单粗暴。开发者什么也不用做。")]),_._v(" "),a("p",[_._v("缺点："),a("strong",[_._v("Kafka 基于 Partition 实现其高并发")]),_._v("能力，如果使用单 Partition，会严重限制 Kafka 的吞吐量。")]),_._v(" "),a("p",[_._v("结论：作为分布式消息引擎，限制并发能力，显然等同于自废武功，所以，这个方案几乎是不可接受的。")]),_._v(" "),a("h3",{attrs:{id:"方案二、同一个-key-的消息发送给指定-partition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方案二、同一个-key-的消息发送给指定-partition"}},[_._v("#")]),_._v(" 方案二、同一个 key 的消息发送给指定 Partition")]),_._v(" "),a("p",[_._v("（1）生产者端显示指定 key 发往一个指定的 Partition，就可以保证同一个 key 在这个 Partition 中是有序的。")]),_._v(" "),a("p",[_._v("（2）接下来，消费者端为每个 key 设定一个缓存队列，然后让一个独立线程负责消费指定 key 的队列，这就保证了消费消息也是有序的。")]),_._v(" "),a("h2",{attrs:{id:"消息积压"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息积压"}},[_._v("#")]),_._v(" 消息积压")]),_._v(" "),a("p",[_._v("先修复消费者，然后停掉当前所有消费者。")]),_._v(" "),a("p",[_._v("新建 Topic，扩大分区，以提高并发处理能力。")]),_._v(" "),a("p",[_._v("创建临时消费者程序，并部署在多节点上，扩大消费处理能力。")]),_._v(" "),a("p",[_._v("最后处理完积压消息后，恢复原先部署架构。")]),_._v(" "),a("h2",{attrs:{id:"验证系统可靠性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#验证系统可靠性"}},[_._v("#")]),_._v(" 验证系统可靠性")]),_._v(" "),a("p",[_._v("建议从 3 个层面验证系统的可靠性：")]),_._v(" "),a("ul",[a("li",[a("strong",[_._v("配置验证")])]),_._v(" "),a("li",[a("strong",[_._v("应用验证")]),_._v(" "),a("ul",[a("li",[_._v("客户端和服务器断开连接")]),_._v(" "),a("li",[_._v("选举")]),_._v(" "),a("li",[_._v("依次重启 broker")]),_._v(" "),a("li",[_._v("依次重启生产者")]),_._v(" "),a("li",[_._v("依次重启消费者")])])]),_._v(" "),a("li",[a("strong",[_._v("监控可靠性")]),_._v(" "),a("ul",[a("li",[_._v("对于生产者来说，最重要的两个指标是消息的 "),a("code",[_._v("error-rate")]),_._v(" 和 "),a("code",[_._v("retry-rate")]),_._v("。如果这两个指标上升，说明系统出了问题。")]),_._v(" "),a("li",[_._v("对于消费者来说，最重要的指标是 "),a("code",[_._v("consumer-lag")]),_._v("，该指标表明了消费者的处理速度与最近提交到分区里的偏移量之间还有多少差距。")])])])]),_._v(" "),a("h2",{attrs:{id:"最佳实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最佳实践"}},[_._v("#")]),_._v(" 最佳实践")]),_._v(" "),a("p",[_._v("生产者")]),_._v(" "),a("ol",[a("li",[_._v("不要使用 "),a("code",[_._v("producer.send(msg)")]),_._v("，而要使用 "),a("code",[_._v("producer.send(msg, callback)")]),_._v("。记住，一定要使用带有回调通知的 "),a("code",[_._v("send")]),_._v(" 方法。")]),_._v(" "),a("li",[_._v("设置 "),a("code",[_._v("acks = all")]),_._v("。"),a("code",[_._v("acks")]),_._v(" 是 Producer 的一个参数，代表了你对“已提交”消息的定义。如果设置成 all，则表明所有副本 Broker 都要接收到消息，该消息才算是“已提交”。这是最高等级的“已提交”定义。")]),_._v(" "),a("li",[_._v("设置 "),a("code",[_._v("retries")]),_._v(" 为一个较大的值。这里的 retries 同样是 Producer 的参数，对应前面提到的 Producer 自动重试。当出现网络的瞬时抖动时，消息发送可能会失败，此时配置了 "),a("code",[_._v("retries > 0")]),_._v(" 的 Producer 能够自动重试消息发送，避免消息丢失。")])]),_._v(" "),a("p",[_._v("服务器（Kafka Broker）")]),_._v(" "),a("ol",[a("li",[_._v("设置 "),a("code",[_._v("unclean.leader.election.enable = false。")]),_._v("这是 Broker 端的参数，它控制的是哪些 Broker 有资格竞选分区的 Leader。如果一个 Broker 落后原先的 Leader 太多，那么它一旦成为新的 Leader，必然会造成消息的丢失。故一般都要将该参数设置成 false，即不允许这种情况的发生。")]),_._v(" "),a("li",[_._v("设置 "),a("code",[_._v("replication.factor")]),_._v(" >= 3。这也是 Broker 端的参数。其实这里想表述的是，最好将消息多保存几份，毕竟目前防止消息丢失的主要机制就是冗余。")]),_._v(" "),a("li",[_._v("设置 "),a("code",[_._v("min.insync.replicas")]),_._v(" > 1。这依然是 Broker 端参数，控制的是消息至少要被写入到多少个副本才算是“已提交”。设置成大于 1 可以提升消息持久性。在实际环境中千万不要使用默认值 1。")]),_._v(" "),a("li",[_._v("确保 "),a("code",[_._v("replication.factor")]),_._v(" > "),a("code",[_._v("min.insync.replicas")]),_._v("。如果两者相等，那么只要有一个副本挂机，整个分区就无法正常工作了。我们不仅要改善消息的持久性，防止数据丢失，还要在不降低可用性的基础上完成。推荐设置成 "),a("code",[_._v("replication.factor = min.insync.replicas + 1")]),_._v("。")])]),_._v(" "),a("p",[_._v("消费者")]),_._v(" "),a("ol",[a("li",[_._v("确保消息消费完成再提交。Consumer 端有个参数 "),a("code",[_._v("enable.auto.commit")]),_._v("，最好把它设置成 false，并采用手动提交位移的方式。就像前面说的，这对于单 Consumer 多线程处理的场景而言是至关重要的。")])]),_._v(" "),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[_._v("#")]),_._v(" 参考资料")]),_._v(" "),a("ul",[a("li",[a("strong",[_._v("官方")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://kafka.apache.org/",target:"_blank",rel:"noopener noreferrer"}},[_._v("Kafka 官网"),a("OutboundLink")],1)]),_._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/apache/kafka",target:"_blank",rel:"noopener noreferrer"}},[_._v("Kafka Github"),a("OutboundLink")],1)]),_._v(" "),a("li",[a("a",{attrs:{href:"https://kafka.apache.org/documentation/",target:"_blank",rel:"noopener noreferrer"}},[_._v("Kafka 官方文档"),a("OutboundLink")],1)])])]),_._v(" "),a("li",[a("strong",[_._v("书籍")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://item.jd.com/12270295.html",target:"_blank",rel:"noopener noreferrer"}},[_._v("《Kafka 权威指南》"),a("OutboundLink")],1)])])]),_._v(" "),a("li",[a("strong",[_._v("教程")]),_._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/intro/100032301",target:"_blank",rel:"noopener noreferrer"}},[_._v("消息队列高手课"),a("OutboundLink")],1)]),_._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/apachecn/kafka-doc-zh",target:"_blank",rel:"noopener noreferrer"}},[_._v("Kafka 中文文档"),a("OutboundLink")],1)]),_._v(" "),a("li",[a("a",{attrs:{href:"https://time.geekbang.org/column/intro/100029201",target:"_blank",rel:"noopener noreferrer"}},[_._v("Kafka 核心技术与实战"),a("OutboundLink")],1)])])])])])}),[],!1,null,null,null);v.default=t.exports}}]);