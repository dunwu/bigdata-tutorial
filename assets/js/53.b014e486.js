(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{486:function(a,v,_){"use strict";_.r(v);var r=_(20),e=Object(r.a)({},(function(){var a=this,v=a.$createElement,_=a._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("h1",{attrs:{id:"yarn"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#yarn"}},[a._v("#")]),a._v(" YARN")]),a._v(" "),_("blockquote",[_("p",[a._v("YARN 的目标是解决 MapReduce 的缺陷。")])]),a._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"#mapreduce-%E7%9A%84%E7%BC%BA%E9%99%B7hadoop-1x"}},[a._v("MapReduce 的缺陷（Hadoop 1.x）")])]),a._v(" "),_("li",[_("a",{attrs:{href:"#yarn-%E7%AE%80%E4%BB%8B"}},[a._v("YARN 简介")])]),a._v(" "),_("li",[_("a",{attrs:{href:"#yarn-%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84"}},[a._v("YARN 系统架构")]),a._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"#resourcemanagerrm"}},[a._v("ResourceManager（RM）")])]),a._v(" "),_("li",[_("a",{attrs:{href:"#nodemanagernm"}},[a._v("NodeManager（NM）")])]),a._v(" "),_("li",[_("a",{attrs:{href:"#applicationmasteram"}},[a._v("ApplicationMaster（AM）")])]),a._v(" "),_("li",[_("a",{attrs:{href:"#container"}},[a._v("Container")])])])]),a._v(" "),_("li",[_("a",{attrs:{href:"#yarn-%E9%AB%98%E5%8F%AF%E7%94%A8"}},[a._v("YARN 高可用")])]),a._v(" "),_("li",[_("a",{attrs:{href:"#yarn-%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6%E7%AD%96%E7%95%A5"}},[a._v("YARN 资源调度策略")]),a._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"#fifo-scheduler%E5%85%88%E8%BF%9B%E5%85%88%E5%87%BA%E8%B0%83%E5%BA%A6%E5%99%A8"}},[a._v("FIFO Scheduler（先进先出调度器）")])]),a._v(" "),_("li",[_("a",{attrs:{href:"#capacity-scheduler%E5%AE%B9%E9%87%8F%E8%B0%83%E5%BA%A6%E5%99%A8"}},[a._v("Capacity Scheduler（容量调度器）")])]),a._v(" "),_("li",[_("a",{attrs:{href:"#fair-scheduler%E5%85%AC%E5%B9%B3%E8%B0%83%E5%BA%A6%E5%99%A8"}},[a._v("Fair Scheduler（公平调度器）")])])])]),a._v(" "),_("li",[_("a",{attrs:{href:"#%E8%B5%84%E6%BA%90"}},[a._v("资源")])])]),a._v(" "),_("h2",{attrs:{id:"mapreduce-的缺陷-hadoop-1-x"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mapreduce-的缺陷-hadoop-1-x"}},[a._v("#")]),a._v(" MapReduce 的缺陷（Hadoop 1.x）")]),a._v(" "),_("ul",[_("li",[a._v("身兼两职：计算框架 + 资源管理框架")]),a._v(" "),_("li",[a._v("JobTracker\n"),_("ul",[_("li",[a._v("既做资源管理，又做任务调度")]),a._v(" "),_("li",[a._v("任务太重，开销过大")]),a._v(" "),_("li",[a._v("存在单点故障")])])]),a._v(" "),_("li",[a._v("资源描述模型过于简单，资源利用率较低\n"),_("ul",[_("li",[a._v("仅把 Task 数量看作资源，没有考虑 CPU 和内存")]),a._v(" "),_("li",[a._v("强制把资源分成 Map Task Slot 和 Reduce Task Slot")])])]),a._v(" "),_("li",[a._v("扩展性较差，集群规模上限 4K")]),a._v(" "),_("li",[a._v("源码难于理解，升级维护困难")])]),a._v(" "),_("h2",{attrs:{id:"yarn-简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#yarn-简介"}},[a._v("#")]),a._v(" YARN 简介")]),a._v(" "),_("p",[a._v("YARN(Yet Another Resource Negotiator，另一种资源管理器)是一个"),_("strong",[a._v("分布式通用资源管理系统")]),a._v("。")]),a._v(" "),_("p",[a._v("设计目标：聚焦资源管理、通用（适用各种计算框架）、高可用、高扩展。")]),a._v(" "),_("h2",{attrs:{id:"yarn-系统架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#yarn-系统架构"}},[a._v("#")]),a._v(" YARN 系统架构")]),a._v(" "),_("ul",[_("li",[a._v("主从结构（master/slave）")]),a._v(" "),_("li",[a._v("将 JobTracker 的资源管理、任务调度功能分离")]),a._v(" "),_("li",[a._v("三种角色：\n"),_("ul",[_("li",[a._v("ResourceManager（Master） - 集群资源的统一管理和分配")]),a._v(" "),_("li",[a._v("NodeManager（Slave） - 管理节点资源，以及容器的生命周期")]),a._v(" "),_("li",[a._v("ApplicationMaster（新角色） - 管理应用程序实例，包括任务调度和资源申请")])])])]),a._v(" "),_("h3",{attrs:{id:"resourcemanager-rm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#resourcemanager-rm"}},[a._v("#")]),a._v(" ResourceManager（RM）")]),a._v(" "),_("p",[_("strong",[a._v("主要功能")])]),a._v(" "),_("ul",[_("li",[a._v("统一管理集群的所有资源")]),a._v(" "),_("li",[a._v("将资源按照一定策略分配给各个应用（ApplicationMaster）")]),a._v(" "),_("li",[a._v("接收 NodeManager 的资源上报信息")])]),a._v(" "),_("p",[_("strong",[a._v("核心组件")])]),a._v(" "),_("ul",[_("li",[a._v("用户交互服务（User Service）")]),a._v(" "),_("li",[a._v("NodeManager 管理")]),a._v(" "),_("li",[a._v("ApplicationMaster 管理")]),a._v(" "),_("li",[a._v("Application 管理")]),a._v(" "),_("li",[a._v("安全管理")]),a._v(" "),_("li",[a._v("资源管理")])]),a._v(" "),_("h3",{attrs:{id:"nodemanager-nm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#nodemanager-nm"}},[a._v("#")]),a._v(" NodeManager（NM）")]),a._v(" "),_("p",[_("strong",[a._v("主要功能")])]),a._v(" "),_("ul",[_("li",[a._v("管理单个节点的资源")]),a._v(" "),_("li",[a._v("向 ResourceManager 汇报节点资源使用情况")]),a._v(" "),_("li",[a._v("管理 Container 的生命周期")])]),a._v(" "),_("p",[_("strong",[a._v("核心组件")])]),a._v(" "),_("ul",[_("li",[a._v("NodeStatusUpdater")]),a._v(" "),_("li",[a._v("ContainerManager")]),a._v(" "),_("li",[a._v("ContainerExecutor")]),a._v(" "),_("li",[a._v("NodeHealthCheckerService")]),a._v(" "),_("li",[a._v("Security")]),a._v(" "),_("li",[a._v("WebServer")])]),a._v(" "),_("h3",{attrs:{id:"applicationmaster-am"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#applicationmaster-am"}},[a._v("#")]),a._v(" ApplicationMaster（AM）")]),a._v(" "),_("p",[_("strong",[a._v("主要功能")])]),a._v(" "),_("ul",[_("li",[a._v("管理应用程序实例")]),a._v(" "),_("li",[a._v("向 ResourceManager 申请任务执行所需的资源")]),a._v(" "),_("li",[a._v("任务调度和监管")])]),a._v(" "),_("p",[_("strong",[a._v("实现方式")])]),a._v(" "),_("ul",[_("li",[a._v("需要为每个应用开发一个 AM 组件")]),a._v(" "),_("li",[a._v("YARN 提供 MapReduce 的 ApplicationMaster 实现")]),a._v(" "),_("li",[a._v("采用基于事件驱动的异步编程模型，由中央事件调度器统一管理所有事件")]),a._v(" "),_("li",[a._v("每种组件都是一种事件处理器，在中央事件调度器中注册")])]),a._v(" "),_("h3",{attrs:{id:"container"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#container"}},[a._v("#")]),a._v(" Container")]),a._v(" "),_("ul",[_("li",[a._v("概念：Container 封装了节点上进程的相关资源，是 YARN 中资源的抽象")]),a._v(" "),_("li",[a._v("分类：运行 ApplicationMaster 的 Container 、运行应用任务的 Container")])]),a._v(" "),_("h2",{attrs:{id:"yarn-高可用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#yarn-高可用"}},[a._v("#")]),a._v(" YARN 高可用")]),a._v(" "),_("p",[a._v("ResourceManager 高可用")]),a._v(" "),_("ul",[_("li",[a._v("1 个 Active RM、多个 Standby RM")]),a._v(" "),_("li",[a._v("宕机后自动实现主备切换")]),a._v(" "),_("li",[a._v("ZooKeeper 的核心作用\n"),_("ul",[_("li",[a._v("Active 节点选举")]),a._v(" "),_("li",[a._v("恢复 Active RM 的原有状态信息")])])]),a._v(" "),_("li",[a._v("重启 AM，杀死所有运行中的 Container")]),a._v(" "),_("li",[a._v("切换方式：手动、自动")])]),a._v(" "),_("h2",{attrs:{id:"yarn-资源调度策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#yarn-资源调度策略"}},[a._v("#")]),a._v(" YARN 资源调度策略")]),a._v(" "),_("h3",{attrs:{id:"fifo-scheduler-先进先出调度器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#fifo-scheduler-先进先出调度器"}},[a._v("#")]),a._v(" FIFO Scheduler（先进先出调度器）")]),a._v(" "),_("p",[_("strong",[a._v("调度策略")])]),a._v(" "),_("p",[a._v("将所有任务放入一个队列，先进队列的先获得资源，排在后面的任务只有等待")]),a._v(" "),_("p",[_("strong",[a._v("缺点")])]),a._v(" "),_("ul",[_("li",[a._v("资源利用率低，无法交叉运行任务")]),a._v(" "),_("li",[a._v("灵活性差，如：紧急任务无法插队，耗时长的任务拖慢耗时短的任务")])]),a._v(" "),_("h3",{attrs:{id:"capacity-scheduler-容量调度器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#capacity-scheduler-容量调度器"}},[a._v("#")]),a._v(" Capacity Scheduler（容量调度器）")]),a._v(" "),_("p",[_("strong",[a._v("核心思想")]),a._v(" - 提前"),_("strong",[a._v("做预算")]),a._v("，在预算指导下分享集群资源。")]),a._v(" "),_("p",[_("strong",[a._v("调度策略")])]),a._v(" "),_("ul",[_("li",[a._v("集群资源由多个队列分享")]),a._v(" "),_("li",[a._v("每个队列都要预设资源分配的比例（提前做预算）")]),a._v(" "),_("li",[a._v("空闲资源优先分配给“实际资源/预算资源”比值最低的队列")]),a._v(" "),_("li",[a._v("队列内部采用 FIFO 调度策略")])]),a._v(" "),_("p",[_("strong",[a._v("特点")])]),a._v(" "),_("ul",[_("li",[a._v("层次化的队列设计：子队列可使用父队列资源")]),a._v(" "),_("li",[a._v("容量保证：每个队列都要预设资源占比，防止资源独占")]),a._v(" "),_("li",[a._v("弹性分配：空闲资源可以分配给任何队列，当多个队列争用时，会按比例进行平衡")]),a._v(" "),_("li",[a._v("支持动态管理：可以动态调整队列的容量、权限等参数，也可动态增加、暂停队列")]),a._v(" "),_("li",[a._v("访问控制：用户只能向自己的队列中提交任务，不能访问其他队列")]),a._v(" "),_("li",[a._v("多租户：多用户共享集群资源")])]),a._v(" "),_("h3",{attrs:{id:"fair-scheduler-公平调度器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#fair-scheduler-公平调度器"}},[a._v("#")]),a._v(" Fair Scheduler（公平调度器）")]),a._v(" "),_("p",[_("strong",[a._v("调度策略")])]),a._v(" "),_("ul",[_("li",[a._v("多队列公平共享集群资源")]),a._v(" "),_("li",[a._v("通过平分的方式，动态分配资源，无需预先设定资源分配比例")]),a._v(" "),_("li",[a._v("队列内部可配置调度策略：FIFO、Fair（默认）")])]),a._v(" "),_("p",[_("strong",[a._v("资源抢占")])]),a._v(" "),_("ul",[_("li",[a._v("终止其他队列的任务，使其让出所占资源，然后将资源分配给占用资源量少于最小资源量限制的队列")])]),a._v(" "),_("p",[_("strong",[a._v("队列权重")])]),a._v(" "),_("ul",[_("li",[a._v("当队列中有任务等待，并且集群中有空闲资源时，每个队列可以根据权重获得不同比例的空闲资源")])]),a._v(" "),_("h2",{attrs:{id:"资源"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#资源"}},[a._v("#")]),a._v(" 资源")])])}),[],!1,null,null,null);v.default=e.exports}}]);