(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{454:function(e,a,r){"use strict";r.r(a);var t=r(20),v=Object(t.a)({},(function(){var e=this,a=e.$createElement,r=e._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"hbase-原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hbase-原理"}},[e._v("#")]),e._v(" HBase 原理")]),e._v(" "),r("blockquote",[r("p",[r("strong",[r("em",[e._v("HBase 是一个在 HDFS 上开发的面向列的分布式数据库。")])])])]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E4%B8%80hbase-%E7%AE%80%E4%BB%8B"}},[e._v("一、HBase 简介")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#hadoop-%E7%9A%84%E5%B1%80%E9%99%90"}},[e._v("Hadoop 的局限")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#hbase-%E7%89%B9%E6%80%A7"}},[e._v("HBase 特性")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#hbase-%E5%92%8C-rdbm"}},[e._v("HBase 和 RDBM")])])])]),e._v(" "),r("li",[r("a",{attrs:{href:"#%E4%BA%8Chbase-%E8%A1%A8%E7%BB%93%E6%9E%84"}},[e._v("二、HBase 表结构")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#row-key-%E8%A1%8C%E9%94%AE"}},[e._v("Row Key (行键)")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#column-family-%E5%88%97%E6%97%8F"}},[e._v("Column Family (列族)")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#column-%E5%88%97"}},[e._v("Column (列)")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#cell-%E5%8D%95%E5%85%83"}},[e._v("Cell (单元)")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#timestamp-%E6%97%B6%E9%97%B4%E6%88%B3"}},[e._v("Timestamp (时间戳)")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#%E8%A1%A8%E7%BB%93%E6%9E%84%E7%A4%BA%E4%BE%8B"}},[e._v("表结构示例")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#hbase-%E8%A1%A8%E7%89%B9%E6%80%A7"}},[e._v("HBase 表特性")])])])]),e._v(" "),r("li",[r("a",{attrs:{href:"#%E4%B8%89hbase-%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84"}},[e._v("三、HBase 存储结构")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#region"}},[e._v("Region")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#region-server"}},[e._v("Region Server")])])])]),e._v(" "),r("li",[r("a",{attrs:{href:"#%E5%9B%9Bhbase-%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84"}},[e._v("四、HBase 系统架构")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#master-server"}},[e._v("Master Server")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#region-server-1"}},[e._v("Region Server")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#zookeeper"}},[e._v("ZooKeeper")])])])]),e._v(" "),r("li",[r("a",{attrs:{href:"#%E4%BA%94hbase-%E8%AF%BB%E5%86%99%E6%B5%81%E7%A8%8B"}},[e._v("五、HBase 读写流程")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E5%86%99%E5%85%A5%E6%95%B0%E6%8D%AE%E7%9A%84%E6%B5%81%E7%A8%8B"}},[e._v("写入数据的流程")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E7%9A%84%E6%B5%81%E7%A8%8B"}},[e._v("读取数据的流程")])])])]),e._v(" "),r("li",[r("a",{attrs:{href:"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99"}},[e._v("参考资料")])])]),e._v(" "),r("h2",{attrs:{id:"hbase-简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hbase-简介"}},[e._v("#")]),e._v(" HBase 简介")]),e._v(" "),r("blockquote",[r("p",[r("strong",[e._v("HBase 是一个构建在 HDFS（Hadoop 文件系统）之上的面向列的数据库管理系统")]),e._v("。")]),e._v(" "),r("p",[e._v("HBase 适用场景：实时地随机访问超大数据集。")])]),e._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200601170449.png",alt:"img"}})]),e._v(" "),r("h3",{attrs:{id:"hadoop-的局限"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hadoop-的局限"}},[e._v("#")]),e._v(" Hadoop 的局限")]),e._v(" "),r("p",[e._v("要想明白为什么产生 HBase，就需要先了解一下 Hadoop 存在的限制？Hadoop 可以通过 "),r("strong",[e._v("HDFS 存储结构化、半结构甚至非结构化的数据")]),e._v("，它是传统数据库的补充，是海量数据存储的最佳方法，它针对大文件的存储，批量访问和流式访问都做了优化，同时也通过多副本解决了容灾问题。")]),e._v(" "),r("p",[e._v("但是，"),r("strong",[e._v("Hadoop 的缺陷在于它只能执行批处理，并且只能以顺序方式访问数据")]),e._v("，这意味着即使是最简单的工作，也必须搜索整个数据集，"),r("strong",[e._v("无法实现对数据的随机访问")]),e._v("。实现数据的随机访问是传统的关系型数据库所擅长的，但它们却不能用于海量数据的存储。在这种情况下，必须有一种新的方案来解决海量数据存储和随机访问的问题，HBase 就是其中之一 (HBase，Cassandra，couchDB，Dynamo 和 MongoDB 都能存储海量数据并支持随机访问)。")]),e._v(" "),r("blockquote",[r("p",[e._v("注：数据结构分类：")]),e._v(" "),r("ul",[r("li",[e._v("结构化数据：即以关系型数据库表形式管理的数据；")]),e._v(" "),r("li",[e._v("半结构化数据：非关系模型的，有基本固定结构模式的数据，例如日志文件、XML 文档、JSON 文档、Email 等；")]),e._v(" "),r("li",[e._v("非结构化数据：没有固定模式的数据，如 WORD、PDF、PPT、EXL，各种格式的图片、视频等。")])])]),e._v(" "),r("h3",{attrs:{id:"hbase-特性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hbase-特性"}},[e._v("#")]),e._v(" HBase 特性")]),e._v(" "),r("p",[e._v("HBase 是一种类似于 "),r("code",[e._v("Google’s Big Table")]),e._v(" 的数据模型，它是 Hadoop 生态系统的一部分，它将数据存储在 HDFS 上，客户端可以通过 HBase 实现对 HDFS 上数据的随机访问。它具有以下特性：")]),e._v(" "),r("ul",[r("li",[r("strong",[e._v("没有真正的索引")]),e._v(" - 行是顺序存储的，每行中的列也是，所以不存在索引膨胀的问题，而且插入性能和表的大小无关。")]),e._v(" "),r("li",[r("strong",[e._v("不支持复杂的事务")]),e._v(" - 仅支持行级事务，即单行数据的读写都是原子性的；")]),e._v(" "),r("li",[r("strong",[e._v("自动分区")]),e._v(" - 在表增长的时候，表会自动分裂区域（region），并分布到可用的节点上。")]),e._v(" "),r("li",[r("strong",[e._v("线性扩展和对于新节点的自动处理")]),e._v(" - 增加一个节点，把它指向现有集群并进行 region server。区域自动重新进行平衡，负载均匀分布。")]),e._v(" "),r("li",[r("strong",[e._v("容错")]),e._v(" - 支持 RegionServers 之间的自动故障转移")]),e._v(" "),r("li",[r("strong",[e._v("批处理")]),e._v(" - MapReduce 集成功能使 HBase 可用用全并行的分布式作业根据数据位置来处理它们。")])]),e._v(" "),r("p",[e._v("在 "),r("a",{attrs:{href:"https://zh.wikipedia.org/wiki/CAP%E5%AE%9A%E7%90%86",target:"_blank",rel:"noopener noreferrer"}},[e._v("CAP 理论"),r("OutboundLink")],1),e._v("中，HBase 属于 CP 类型的系统。")]),e._v(" "),r("h3",{attrs:{id:"hbase-和-rdbm"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hbase-和-rdbm"}},[e._v("#")]),e._v(" HBase 和 RDBM")]),e._v(" "),r("table",[r("thead",[r("tr",[r("th",[e._v("HBase")]),e._v(" "),r("th",[e._v("RDBM（关系型数据库）")])])]),e._v(" "),r("tbody",[r("tr",[r("td",[e._v("HBase 无模式，它不具有固定列模式的概念;仅定义列族。")]),e._v(" "),r("td",[e._v("RDBMS 有它的模式，描述表的整体结构的约束。")])]),e._v(" "),r("tr",[r("td",[e._v("它专门创建为宽表。 HBase 是横向扩展。")]),e._v(" "),r("td",[e._v("这些都是细而专为小表。很难形成规模。")])]),e._v(" "),r("tr",[r("td",[e._v("没有任何事务存在于 HBase。")]),e._v(" "),r("td",[e._v("RDBMS 是事务性的。")])]),e._v(" "),r("tr",[r("td",[e._v("它反规范化的数据。")]),e._v(" "),r("td",[e._v("它具有规范化的数据。")])]),e._v(" "),r("tr",[r("td",[e._v("它用于半结构以及结构化数据是非常好的。")]),e._v(" "),r("td",[e._v("用于结构化数据非常好。")])])])]),e._v(" "),r("h3",{attrs:{id:"hbase-的适用场景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hbase-的适用场景"}},[e._v("#")]),e._v(" HBase 的适用场景")]),e._v(" "),r("ul",[r("li",[r("strong",[e._v("数据量足够多")]),e._v("：如果有十亿及百亿行数据，那么 Hbase 是一个很好的选项；如果只有几百万行甚至不到的数据量，RDBMS 是一个很好的选择。因为数据量小的话，真正能工作的机器量少，剩余的机器都处于空闲的状态。HBase 表初始只有一个 Region，当表数据量达到一定程度，会根据 rowkey 自动分片。")]),e._v(" "),r("li",[r("strong",[e._v("硬件资源充足")]),e._v("：每个 HDFS 集群在少于 5 个节点的时候，都不能表现的很好。因为 HDFS 默认的复制数量是 3，再加上一个 NameNode。")]),e._v(" "),r("li",[r("strong",[e._v("不需要二级索引，静态类型的列，事务等特性")]),e._v("：一个已经用 RDBMS 的系统想要切换到 Hbase，则需要重新设计系统。")])]),e._v(" "),r("h2",{attrs:{id:"hbase-表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hbase-表"}},[e._v("#")]),e._v(" HBase 表")]),e._v(" "),r("p",[e._v("HBase 是一个面向列的数据库，在表中它由行排序。更确切的说，HBase 是一个面向 "),r("code",[e._v("列族")]),e._v(" 的数据库。HBase 表 仅定义列族，表具有多个列族，每个列族可以包含任意数量的列，列由多个单元格（cell ）组成，单元格可以存储多个版本的数据，多个版本数据以时间戳进行区分。")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/bigdata/hbase/1551164163369.png",alt:"img"}})]),e._v(" "),r("h3",{attrs:{id:"hbase-表结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hbase-表结构"}},[e._v("#")]),e._v(" HBase 表结构")]),e._v(" "),r("h4",{attrs:{id:"row-key-行键"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#row-key-行键"}},[e._v("#")]),e._v(" Row Key (行键)")]),e._v(" "),r("p",[r("strong",[r("code",[e._v("Row Key")]),e._v(" 是用来检索记录的主键")]),e._v("。想要访问 HBase Table 中的数据，只有以下三种方式：")]),e._v(" "),r("ul",[r("li",[e._v("通过指定的 "),r("code",[e._v("Row Key")]),e._v(" 进行访问；")]),e._v(" "),r("li",[e._v("通过 Row Key 的 range 进行访问，即访问指定范围内的行；")]),e._v(" "),r("li",[e._v("进行全表扫描。")])]),e._v(" "),r("p",[r("code",[e._v("Row Key")]),e._v(" 可以是任意字符串，存储时数据按照 "),r("code",[e._v("Row Key")]),e._v(" 的字典序进行排序。这里需要注意以下两点：")]),e._v(" "),r("ul",[r("li",[e._v("因为字典序对 Int 排序的结果是 1,10,100,11,12,13,14,15,16,17,18,19,2,20,21,…,9,91,92,93,94,95,96,97,98,99。如果你使用整型的字符串作为行键，那么为了保持整型的自然序，行键必须用 0 作左填充。")]),e._v(" "),r("li",[e._v("行的一次读写操作时原子性的 (不论一次读写多少列)。")])]),e._v(" "),r("h4",{attrs:{id:"column-family-列族"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#column-family-列族"}},[e._v("#")]),e._v(" Column Family (列族)")]),e._v(" "),r("p",[e._v("HBase 表中的每个列，都归属于某个列族。列族是表的 Schema 的一部分，所以列族需要在创建表时进行定义。列族的所有列都以列族名作为前缀，例如 "),r("code",[e._v("courses:history")]),e._v("，"),r("code",[e._v("courses:math")]),e._v(" 都属于 "),r("code",[e._v("courses")]),e._v(" 这个列族。")]),e._v(" "),r("h4",{attrs:{id:"column-列"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#column-列"}},[e._v("#")]),e._v(" Column (列)")]),e._v(" "),r("p",[e._v("HBase 中的列由列族和列限定符组成，由 "),r("code",[e._v(":")]),e._v("(冒号) 进行分隔，即一个完整的列名应该表述为 "),r("code",[e._v("列族名 ：列限定符")]),e._v("。")]),e._v(" "),r("p",[e._v("列限定符，你可以理解为是具体的列名，例如 "),r("code",[e._v("courses:history")]),e._v("，"),r("code",[e._v("courses:math")]),e._v(" 都属于 "),r("code",[e._v("courses")]),e._v(" 这个列族，它们的列限定符分别是 "),r("code",[e._v("history")]),e._v(" 和 "),r("code",[e._v("math")]),e._v("。需要注意的是列限定符不是表 Schema 的一部分，你可以在插入数据的过程中动态创建列。")]),e._v(" "),r("h4",{attrs:{id:"cell-单元"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cell-单元"}},[e._v("#")]),e._v(" Cell (单元)")]),e._v(" "),r("p",[r("code",[e._v("Cell")]),e._v(" 是行，列族和列限定符的组合，并包含值和时间戳。你可以等价理解为关系型数据库中由指定行和指定列确定的一个单元格，但不同的是 HBase 中的一个单元格是由多个版本的数据组成的，每个版本的数据用时间戳进行区分。")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/bigdata/hbase/1551164224778.png",alt:"img"}})]),e._v(" "),r("h4",{attrs:{id:"timestamp-时间戳"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#timestamp-时间戳"}},[e._v("#")]),e._v(" Timestamp (时间戳)")]),e._v(" "),r("p",[e._v("HBase 中通过 "),r("code",[e._v("row key")]),e._v(" 和 "),r("code",[e._v("column")]),e._v(" 确定的为一个存储单元称为 "),r("code",[e._v("Cell")]),e._v("。每个 "),r("code",[e._v("Cell")]),e._v(" 都保存着同一份数据的多个版本。版本通过时间戳来索引，时间戳的类型是 64 位整型，时间戳可以由 HBase 在数据写入时自动赋值，也可以由客户显式指定。每个 "),r("code",[e._v("Cell")]),e._v(" 中，不同版本的数据按照时间戳倒序排列，即最新的数据排在最前面。")]),e._v(" "),r("h4",{attrs:{id:"表结构示例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#表结构示例"}},[e._v("#")]),e._v(" 表结构示例")]),e._v(" "),r("ul",[r("li",[e._v("RowKey 为行的唯一标识，所有行按照 RowKey 的字典序进行排序；")]),e._v(" "),r("li",[e._v("该表具有两个列族，分别是 personal 和 office;")]),e._v(" "),r("li",[e._v("其中列族 personal 拥有 name、city、phone 三个列，列族 office 拥有 tel、addres 两个列。")])]),e._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200601172926.png",alt:"img"}})]),e._v(" "),r("h3",{attrs:{id:"hbase-表特性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hbase-表特性"}},[e._v("#")]),e._v(" HBase 表特性")]),e._v(" "),r("p",[e._v("从 HBase 表结构一节可以了解，HBase 表和关系型数据库表类似。只不过它的单元格有版本，行是排序的，而只要列族预先存在，客户端可以随时把任意列添加到列族中。")]),e._v(" "),r("p",[e._v("HBase 表具有以下特点：")]),e._v(" "),r("ul",[r("li",[e._v("容量大：一个表可以有数十亿行，上百万列；")]),e._v(" "),r("li",[e._v("面向列：数据是按照列存储，每一列都单独存放，数据即索引，在查询时可以只访问指定列的数据，有效地降低了系统的 I/O 负担；")]),e._v(" "),r("li",[e._v("稀疏性：空 (null) 列并不占用存储空间，表可以设计的非常稀疏 ；")]),e._v(" "),r("li",[e._v("数据多版本：每个单元中的数据可以有多个版本，按照时间戳排序，新的数据在最上面；")]),e._v(" "),r("li",[e._v("存储类型：所有数据的底层存储格式都是字节数组 (byte[])。")])]),e._v(" "),r("h3",{attrs:{id:"hbase-表设计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hbase-表设计"}},[e._v("#")]),e._v(" HBase 表设计")]),e._v(" "),r("p",[e._v("Hbase 设计时要考虑的因素")]),e._v(" "),r("ul",[r("li",[e._v("这个表应该有多少列簇")]),e._v(" "),r("li",[e._v("列簇使用什么数据")]),e._v(" "),r("li",[e._v("每个列簇有有多少列")]),e._v(" "),r("li",[e._v("列名是什么，尽管列名不必在建表时定义，但读写数据是要知道的")]),e._v(" "),r("li",[e._v("单元应该存放什么数据")]),e._v(" "),r("li",[e._v("每个单元存储多少时间版本")]),e._v(" "),r("li",[e._v("行健(rowKey)结构是什么，应该包含什么信息")])]),e._v(" "),r("h4",{attrs:{id:"行健设计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#行健设计"}},[e._v("#")]),e._v(" 行健设计")]),e._v(" "),r("p",[e._v("关键部分，直接关系到后续服务的访问性能。如果行健设计不合理，后续查询服务效率会成倍的递减。")]),e._v(" "),r("ul",[r("li",[e._v("避免单调的递增行健，因为 Hbase 的行健是有序排列的，这样可能导致一段时间内大部分写入集中在某一个 Region 上进行操作，负载都在一台节点上。可以设计成：[metric_type][event_timestamp]，不同的 metric_type 可以将压力分散到不同的 region 上")]),e._v(" "),r("li",[e._v("行健短到可读即可，因为查询短键不必长键性能好多少，所以设计时要权衡长度。")]),e._v(" "),r("li",[e._v("行健不能改变，"),r("strong",[e._v("唯一可以改变的方式是先删除后插入")])])]),e._v(" "),r("h4",{attrs:{id:"列簇设计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#列簇设计"}},[e._v("#")]),e._v(" 列簇设计")]),e._v(" "),r("p",[e._v("列簇是一些列的集合，一个列簇的成员有相同的前缀，以冒号(:)作为分隔符。")]),e._v(" "),r("ul",[r("li",[e._v("现在 Hbase 不能很好处理 2~3 个以上的列簇，所以尽可能让列簇少一些，如果表有多个列簇，列簇 A 有 100 万行数据，列簇 B 有 10 亿行，那么列簇 A 会分散到很多的 Region 导致扫描列簇 A 的时候效率底下。")]),e._v(" "),r("li",[e._v("列簇名的长度要尽量小，一个为了节省空间，另外加快效率，比如 d 表示 data，v 表示 value")])]),e._v(" "),r("h4",{attrs:{id:"列簇属性配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#列簇属性配置"}},[e._v("#")]),e._v(" 列簇属性配置")]),e._v(" "),r("ul",[r("li",[e._v("HFile 数据块，默认是 64KB，数据库的大小影响数据块索引的大小。数据块大的话一次加载进内存的数据越多，扫描查询效果越好。但是数据块小的话，随机查询性能更好")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("> create 'mytable',{NAME => 'cf1', BLOCKSIZE => '65536'}\n复制代码\n")])])]),r("ul",[r("li",[e._v("数据块缓存，数据块缓存默认是打开的，如果一些比较少访问的数据可以选择关闭缓存")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("> create 'mytable',{NAME => 'cf1', BLOCKCACHE => 'FALSE'}\n复制代码\n")])])]),r("ul",[r("li",[e._v("数据压缩，压缩会提高磁盘利用率，但是会增加 CPU 的负载，看情况进行控制")])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("> create 'mytable',{NAME => 'cf1', COMPRESSION => 'SNAPPY'}\n复制代码\n")])])]),r("p",[e._v("Hbase 表设计是和需求相关的，但是遵守表设计的一些硬性指标对性能的提升还是很有帮助的，这里整理了一些设计时用到的要点。")]),e._v(" "),r("h2",{attrs:{id:"hbase-存储结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hbase-存储结构"}},[e._v("#")]),e._v(" HBase 存储结构")]),e._v(" "),r("p",[e._v("在 HBase 中，表被分割成多个更小的块然后分散的存储在不同的服务器上，这些小块叫做 Regions，存放 Regions 的地方叫做 RegionServer。Master 进程负责处理不同的 RegionServer 之间的 Region 的分发。")]),e._v(" "),r("h3",{attrs:{id:"region"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#region"}},[e._v("#")]),e._v(" Region")]),e._v(" "),r("p",[e._v("HBase 自动把表水平划分成区域（region）。每个区域由表中行的子集构成。每个区域由它所属于的表，它所包含的第一行及其最后一行来表示。HBase Table 中的所有行按照 "),r("code",[e._v("Row Key")]),e._v(" 的字典序排列。HBase Tables 通过行键的范围 (row key range) 被水平切分成多个 "),r("code",[e._v("Region")]),e._v(", 一个 "),r("code",[e._v("Region")]),e._v(" 包含了在 start key 和 end key 之间的所有行。")]),e._v(" "),r("blockquote",[r("p",[r("strong",[r("code",[e._v("Region")]),e._v(" 只不过是表被拆分，并分布在 Region Server。Region 是 HBase 集群上分布数据的最小单位")]),e._v("。")])]),e._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/bigdata/hbase/1551165887616.png",alt:"img"}})]),e._v(" "),r("p",[e._v("每个表一开始只有一个 "),r("code",[e._v("Region")]),e._v("，随着数据不断增加，"),r("code",[e._v("Region")]),e._v(" 会不断增大，当增大到一个阀值的时候，"),r("code",[e._v("Region")]),e._v(" 就会等分为两个新的 "),r("code",[e._v("Region")]),e._v("。当 Table 中的行不断增多，就会有越来越多的 "),r("code",[e._v("Region")]),e._v("。")]),e._v(" "),r("p",[r("code",[e._v("Region")]),e._v(" 是 HBase 中"),r("strong",[e._v("分布式存储和负载均衡的最小单元")]),e._v("。这意味着不同的 "),r("code",[e._v("Region")]),e._v(" 可以分布在不同的 "),r("code",[e._v("Region Server")]),e._v(" 上。但一个 "),r("code",[e._v("Region")]),e._v(" 是不会拆分到多个 Server 上的。")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200601181219.png",alt:"img"}})]),e._v(" "),r("h3",{attrs:{id:"region-server"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#region-server"}},[e._v("#")]),e._v(" Region Server")]),e._v(" "),r("p",[r("code",[e._v("Region Server")]),e._v(" 运行在 HDFS 的 DataNode 上。它具有以下组件：")]),e._v(" "),r("ul",[r("li",[r("strong",[e._v("WAL(Write Ahead Log，预写日志)")]),e._v("：用于存储尚未进持久化存储的数据记录，以便在发生故障时进行恢复。如果写 WAL 失败了，那么修改数据的完整操作就是失败的。\n"),r("ul",[r("li",[e._v("通常情况，每个 RegionServer 只有一个 WAL 实例。在 2.0 之前，WAL 的实现叫做 HLog")]),e._v(" "),r("li",[e._v("WAL 位于 "),r("code",[e._v("/hbase/WALs/")]),e._v(" 目录下")]),e._v(" "),r("li",[e._v("如果每个 RegionServer 只有一个 WAL，由于 HDFS 必须是连续的，导致必须写 WAL 连续的，然后出现性能问题。MultiWAL 可以让 RegionServer 同时写多个 WAL 并行的，通过 HDFS 底层的多管道，最终提升总的吞吐量，但是不会提升单个 Region 的吞吐量。")])])]),e._v(" "),r("li",[r("strong",[e._v("BlockCache")]),e._v("：读缓存。它将频繁读取的数据存储在内存中，如果存储不足，它将按照 "),r("code",[e._v("最近最少使用原则")]),e._v(" 清除多余的数据。")]),e._v(" "),r("li",[r("strong",[e._v("MemStore")]),e._v("：写缓存。它存储尚未写入磁盘的新数据，并会在数据写入磁盘之前对其进行排序。每个 Region 上的每个列族都有一个 MemStore。")]),e._v(" "),r("li",[r("strong",[e._v("HFile")]),e._v("：将行数据按照 Key/Values 的形式存储在文件系统上。HFile 是 Hbase 在 HDFS 中存储数据的格式，它包含多层的索引，这样在 Hbase 检索数据的时候就不用完全的加载整个文件。索引的大小(keys 的大小，数据量的大小)影响 block 的大小，在大数据集的情况下，block 的大小设置为每个 RegionServer 1GB 也是常见的。\n"),r("ul",[r("li",[e._v("起初，HFile 中并没有任何 Block，数据还存在于 MemStore 中。")]),e._v(" "),r("li",[e._v("Flush 发生时，创建 HFile Writer，第一个空的 Data Block 出现，初始化后的 Data Block 中为 Header 部分预留了空间，Header 部分用来存放一个 Data Block 的元数据信息。")]),e._v(" "),r("li",[e._v("而后，位于 MemStore 中的 KeyValues 被一个个 append 到位于内存中的第一个 Data Block 中：")])])])]),e._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/bigdata/hbase/1551166602999.png",alt:"img"}})]),e._v(" "),r("p",[e._v("Region Server 存取一个子表时，会创建一个 Region 对象，然后对表的每个列族创建一个 "),r("code",[e._v("Store")]),e._v(" 实例，每个 "),r("code",[e._v("Store")]),e._v(" 会有 0 个或多个 "),r("code",[e._v("StoreFile")]),e._v(" 与之对应，每个 "),r("code",[e._v("StoreFile")]),e._v(" 则对应一个 "),r("code",[e._v("HFile")]),e._v("，HFile 就是实际存储在 HDFS 上的文件。")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200612151239.png",alt:"img"}})]),e._v(" "),r("h2",{attrs:{id:"hbase-系统架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hbase-系统架构"}},[e._v("#")]),e._v(" HBase 系统架构")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/bigdata/hbase/1551164744748.png",alt:"img"}})]),e._v(" "),r("p",[e._v("和 HDFS、YARN 一样，"),r("strong",[e._v("HBase 也采用 master / slave 架构")]),e._v("：")]),e._v(" "),r("ul",[r("li",[e._v("HBase 有一个 master 节点。"),r("strong",[e._v("master 节点负责将区域（region）分配给 region 节点；恢复 region 节点的故障")]),e._v("。")]),e._v(" "),r("li",[e._v("HBase 有多个 region 节点。"),r("strong",[e._v("region 节点负责零个或多个区域（region）的管理并相应客户端的读写请求。region 节点还负责区域的划分并通知 master 节点有了新的子区域")]),e._v("。")])]),e._v(" "),r("p",[e._v("HBase 依赖 ZooKeeper 来实现故障恢复。")]),e._v(" "),r("h3",{attrs:{id:"master-server"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#master-server"}},[e._v("#")]),e._v(" Master Server")]),e._v(" "),r("p",[r("strong",[e._v("HBase master 节点负责将区域（region）分配给 region 节点；恢复 region 节点的故障")]),e._v("。")]),e._v(" "),r("p",[e._v("master 服务器负责协调 region 服务器：")]),e._v(" "),r("ul",[r("li",[e._v("协助区域启动，出现故障恢复或负载均衡情况时，重新分配 region 服务器")]),e._v(" "),r("li",[e._v("监控集群中的所有 region 服务器")]),e._v(" "),r("li",[e._v("处理 DDL 请求（创建、删除、更新表）")])]),e._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/bigdata/hbase/1551166513572.png",alt:"img"}})]),e._v(" "),r("h3",{attrs:{id:"region-server-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#region-server-2"}},[e._v("#")]),e._v(" Region Server")]),e._v(" "),r("ul",[r("li",[e._v("Region Server 负责维护 Master 分配给它的 Region，并处理发送到 Region 上的 IO 请求；")]),e._v(" "),r("li",[e._v("当 Region 过大，"),r("strong",[e._v("Region Server 负责自动切片")]),e._v("，并通知 Master 记录更新。")])]),e._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200612151602.png",alt:"img"}})]),e._v(" "),r("h3",{attrs:{id:"zookeeper"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper"}},[e._v("#")]),e._v(" ZooKeeper")]),e._v(" "),r("p",[r("strong",[e._v("HBase 依赖 ZooKeeper 作为分布式协调服务来维护集群中的服务器状态")]),e._v("。Zookeeper 维护哪些服务器是活动的和可用的，并提供服务器故障通知。集群至少应该有 3 个节点。")]),e._v(" "),r("p",[e._v("ZooKeeper 的作用：")]),e._v(" "),r("ul",[r("li",[e._v("每个 Region Server 都会在 ZooKeeper 上创建一个临时节点，Master 通过 Zookeeper 的 Watcher 机制对节点进行监控，从而可以发现新加入的 Region Server 或故障退出的 Region Server；")]),e._v(" "),r("li",[e._v("所有 Masters 会竞争性地在 Zookeeper 上创建同一个临时节点，由于 Zookeeper 只能有一个同名节点，所以必然只有一个 Master 能够创建成功，此时该 Master 就是主 Master，主 Master 会定期向 Zookeeper 发送心跳。备用 Masters 则通过 Watcher 机制对主 HMaster 所在节点进行监听；")]),e._v(" "),r("li",[e._v("如果主 Master 未能定时发送心跳，则其持有的 Zookeeper 会话会过期，相应的临时节点也会被删除，这会触发定义在该节点上的 Watcher 事件，使得备用的 Master Servers 得到通知。所有备用的 Master Servers 在接到通知后，会再次去竞争性地创建临时节点，完成主 Master 的选举。")])]),e._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/cs/bigdata/hbase/1551166447147.png",alt:"img"}})]),e._v(" "),r("h2",{attrs:{id:"hbase-读写流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hbase-读写流程"}},[e._v("#")]),e._v(" HBase 读写流程")]),e._v(" "),r("h3",{attrs:{id:"写入数据的流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#写入数据的流程"}},[e._v("#")]),e._v(" 写入数据的流程")]),e._v(" "),r("ol",[r("li",[e._v("Client 向 Region Server 提交写请求；")]),e._v(" "),r("li",[e._v("Region Server 找到目标 Region；")]),e._v(" "),r("li",[e._v("Region 检查数据是否与 Schema 一致；")]),e._v(" "),r("li",[e._v("如果客户端没有指定版本，则获取当前系统时间作为数据版本；")]),e._v(" "),r("li",[e._v("将更新写入 WAL Log；")]),e._v(" "),r("li",[e._v("将更新写入 Memstore；")]),e._v(" "),r("li",[e._v("判断 Memstore 存储是否已满，如果存储已满则需要 flush 为 Store Hfile 文件。")])]),e._v(" "),r("blockquote",[r("p",[e._v("更为详细写入流程可以参考："),r("a",{attrs:{href:"http://hbasefly.com/2016/03/23/hbase_writer/",target:"_blank",rel:"noopener noreferrer"}},[e._v("HBase － 数据写入流程解析"),r("OutboundLink")],1)])]),e._v(" "),r("h3",{attrs:{id:"读取数据的流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#读取数据的流程"}},[e._v("#")]),e._v(" 读取数据的流程")]),e._v(" "),r("p",[e._v("以下是客户端首次读写 HBase 上数据的流程：")]),e._v(" "),r("ol",[r("li",[e._v("客户端从 Zookeeper 获取 "),r("code",[e._v("META")]),e._v(" 表所在的 Region Server；")]),e._v(" "),r("li",[e._v("客户端访问 "),r("code",[e._v("META")]),e._v(" 表所在的 Region Server，从 "),r("code",[e._v("META")]),e._v(" 表中查询到访问行键所在的 Region Server，之后客户端将缓存这些信息以及 "),r("code",[e._v("META")]),e._v(" 表的位置；")]),e._v(" "),r("li",[e._v("客户端从行键所在的 Region Server 上获取数据。")])]),e._v(" "),r("p",[e._v("如果再次读取，客户端将从缓存中获取行键所在的 Region Server。这样客户端就不需要再次查询 "),r("code",[e._v("META")]),e._v(" 表，除非 Region 移动导致缓存失效，这样的话，则将会重新查询并更新缓存。")]),e._v(" "),r("p",[e._v("注："),r("code",[e._v("META")]),e._v(" 表是 HBase 中一张特殊的表，它保存了所有 Region 的位置信息，META 表自己的位置信息则存储在 ZooKeeper 上。")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/dunwu/images/dev/snap/20200601182655.png",alt:"img"}})]),e._v(" "),r("blockquote",[r("p",[e._v("更为详细读取数据流程参考：")]),e._v(" "),r("p",[r("a",{attrs:{href:"http://hbasefly.com/2016/12/21/hbase-getorscan/",target:"_blank",rel:"noopener noreferrer"}},[e._v("HBase 原理－数据读取流程解析"),r("OutboundLink")],1)]),e._v(" "),r("p",[r("a",{attrs:{href:"http://hbasefly.com/2017/06/11/hbase-scan-2/",target:"_blank",rel:"noopener noreferrer"}},[e._v("HBase 原理－迟到的‘数据读取流程部分细节"),r("OutboundLink")],1)])]),e._v(" "),r("h2",{attrs:{id:"参考资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[e._v("#")]),e._v(" 参考资料")]),e._v(" "),r("ul",[r("li",[r("strong",[e._v("官方")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"http://hbase.apache.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("HBase 官网"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://hbase.apache.org/book.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("HBase 官方文档"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"http://abloz.com/hbase/book.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("HBase 官方文档中文版"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://hbase.apache.org/apidocs/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("HBase API"),r("OutboundLink")],1)])])]),e._v(" "),r("li",[r("strong",[e._v("教程")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/heibaiying/BigData-Notes",target:"_blank",rel:"noopener noreferrer"}},[e._v("BigData-Notes"),r("OutboundLink")],1)])])]),e._v(" "),r("li",[r("strong",[e._v("文章")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/bigtable-osdi06.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Bigtable: A Distributed Storage System for Structured Data"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://mapr.com/blog/in-depth-look-hbase-architecture/",target:"_blank",rel:"noopener noreferrer"}},[e._v("An In-Depth Look at the HBase Architecture"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://juejin.im/post/5c666cc4f265da2da53eb714",target:"_blank",rel:"noopener noreferrer"}},[e._v("入门 HBase，看这一篇就够了"),r("OutboundLink")],1)])])])])])}),[],!1,null,null,null);a.default=v.exports}}]);