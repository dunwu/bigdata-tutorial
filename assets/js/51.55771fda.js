(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{483:function(a,v,_){"use strict";_.r(v);var r=_(20),l=Object(r.a)({},(function(){var a=this,v=a.$createElement,_=a._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("h1",{attrs:{id:"spark"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spark"}},[a._v("#")]),a._v(" Spark")]),a._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"#spark-%E7%AE%80%E4%BB%8B"}},[a._v("Spark 简介")]),a._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"#spark-%E6%A6%82%E5%BF%B5"}},[a._v("Spark 概念")])]),a._v(" "),_("li",[_("a",{attrs:{href:"#spark-%E7%89%B9%E7%82%B9"}},[a._v("Spark 特点")])])])]),a._v(" "),_("li",[_("a",{attrs:{href:"#spark-%E5%8E%9F%E7%90%86"}},[a._v("Spark 原理")]),a._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"#%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B"}},[a._v("编程模型")])])])])]),a._v(" "),_("h2",{attrs:{id:"spark-简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spark-简介"}},[a._v("#")]),a._v(" Spark 简介")]),a._v(" "),_("h3",{attrs:{id:"spark-概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spark-概念"}},[a._v("#")]),a._v(" Spark 概念")]),a._v(" "),_("ul",[_("li",[a._v("大规模分布式通用计算引擎\n"),_("ul",[_("li",[a._v("Spark Core：核心计算框架")]),a._v(" "),_("li",[a._v("Spark SQL：结构化数据查询")]),a._v(" "),_("li",[a._v("Spark Streaming：实时流处理")]),a._v(" "),_("li",[a._v("Spark MLib：机器学习")]),a._v(" "),_("li",[a._v("Spark GraphX：图计算")])])]),a._v(" "),_("li",[a._v("具有高吞吐、低延时、通用易扩展、高容错等特点")]),a._v(" "),_("li",[a._v("采用 Scala 语言开发")]),a._v(" "),_("li",[a._v("提供多种运行模式")])]),a._v(" "),_("h3",{attrs:{id:"spark-特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spark-特点"}},[a._v("#")]),a._v(" Spark 特点")]),a._v(" "),_("ul",[_("li",[a._v("计算高效\n"),_("ul",[_("li",[a._v("利用内存计算、Cache 缓存机制，支持迭代计算和数据共享，减少数据读取的 IO 开销")]),a._v(" "),_("li",[a._v("利用 DAG 引擎，减少中间计算结果写入 HDFS 的开销")]),a._v(" "),_("li",[a._v("利用多线程池模型，减少任务启动开销，避免 Shuffle 中不必要的排序和磁盘 IO 操作")])])]),a._v(" "),_("li",[a._v("通用易用\n"),_("ul",[_("li",[a._v("适用于批处理、流处理、交互式计算、机器学习算法等场景")]),a._v(" "),_("li",[a._v("提供了丰富的开发 API，支持 Scala、Java、Python、R 等")])])]),a._v(" "),_("li",[a._v("运行模式多样\n"),_("ul",[_("li",[a._v("Local 模式")]),a._v(" "),_("li",[a._v("Standalone 模式")]),a._v(" "),_("li",[a._v("YARN/Mesos 模式")])])]),a._v(" "),_("li",[a._v("计算高效\n"),_("ul",[_("li",[a._v("利用内存计算、Cache 缓存机制，支持迭代计算和数据共享，减少数据读取的 IO 开销")]),a._v(" "),_("li",[a._v("利用 DAG 引擎，减少中间计算结果写入 HDFS 的开销")]),a._v(" "),_("li",[a._v("利用多线程池模型，减少任务启动开销，避免 Shuffle 中不必要的排序和磁盘 IO 操作")])])]),a._v(" "),_("li",[a._v("通用易用\n"),_("ul",[_("li",[a._v("适用于批处理、流处理、交互式计算、机器学习等场景")]),a._v(" "),_("li",[a._v("提供了丰富的开发 API，支持 Scala、Java、Python、R 等")])])])]),a._v(" "),_("h2",{attrs:{id:"spark-原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spark-原理"}},[a._v("#")]),a._v(" Spark 原理")]),a._v(" "),_("h3",{attrs:{id:"编程模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#编程模型"}},[a._v("#")]),a._v(" 编程模型")]),a._v(" "),_("h4",{attrs:{id:"rdd"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rdd"}},[a._v("#")]),a._v(" RDD")]),a._v(" "),_("ul",[_("li",[a._v("弹性分布式数据集（Resilient Distributed Datesets）\n"),_("ul",[_("li",[a._v("分布在集群中的只读对象集合")]),a._v(" "),_("li",[a._v("由多个 Partition 组成")]),a._v(" "),_("li",[a._v("通过转换操作构造")]),a._v(" "),_("li",[a._v("失效后自动重构（弹性）")]),a._v(" "),_("li",[a._v("存储在内存或磁盘中")])])]),a._v(" "),_("li",[a._v("Spark 基于 RDD 进行计算")])]),a._v(" "),_("h4",{attrs:{id:"rdd-操作-operator"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rdd-操作-operator"}},[a._v("#")]),a._v(" RDD 操作（Operator）")]),a._v(" "),_("ul",[_("li",[a._v("Transformation（转换）\n"),_("ul",[_("li",[a._v("将 Scala 集合或 Hadoop 输入数据构造成一个新 RDD")]),a._v(" "),_("li",[a._v("通过已有的 RDD 产生新 RDD")]),a._v(" "),_("li",[a._v("惰性执行：只记录转换关系，不触发计算")]),a._v(" "),_("li",[a._v("例如：map、filter、flatmap、union、distinct、sortbykey")])])]),a._v(" "),_("li",[a._v("Action（动作）\n"),_("ul",[_("li",[a._v("通过 RDD 计算得到一个值或一组值")]),a._v(" "),_("li",[a._v("真正触发计算")]),a._v(" "),_("li",[a._v("例如：first、count、collect、foreach、saveAsTextFile")])])])]),a._v(" "),_("h4",{attrs:{id:"rdd-依赖-dependency"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rdd-依赖-dependency"}},[a._v("#")]),a._v(" RDD 依赖（Dependency）")]),a._v(" "),_("ul",[_("li",[a._v("窄依赖（Narrow Dependency）\n"),_("ul",[_("li",[a._v("父 RDD 中的分区最多只能被一个子 RDD 的一个分区使用")]),a._v(" "),_("li",[a._v("子 RDD 如果有部分分区数据丢失或损坏，只需从对应的父 RDD 重新计算恢复")]),a._v(" "),_("li",[a._v("例如：map、filter、union")])])]),a._v(" "),_("li",[a._v("宽依赖（Shuffle/Wide Dependency ）\n"),_("ul",[_("li",[a._v("子 RDD 分区依赖父 RDD 的所有分区")]),a._v(" "),_("li",[a._v("子 RDD 如果部分或全部分区数据丢失或损坏，必须从所有父 RDD 分区重新计算")]),a._v(" "),_("li",[a._v("相对于窄依赖，宽依赖付出的代价要高很多，尽量避免使用")]),a._v(" "),_("li",[a._v("例如：groupByKey、reduceByKey、sortByKey")])])])])])}),[],!1,null,null,null);v.default=l.exports}}]);